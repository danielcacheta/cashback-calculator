{
	"info": {
		"_postman_id": "998c563d-5831-4a06-8623-ab2e65250ea6",
		"name": "Cashback Calculator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CalculateCashback/500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"10% cashback for 500\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.cashbackPercentage).to.eql(10)\r",
							"  pm.expect(responseJson.cashbackValue).to.eql(50)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/calculateCashback/500",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"calculateCashback",
						"500"
					]
				}
			},
			"response": []
		},
		{
			"name": "CalculateCashback/1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"15% cashback for 1000\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.cashbackPercentage).to.eql(15)\r",
							"  pm.expect(responseJson.cashbackValue).to.eql(150)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/calculateCashback/1000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"calculateCashback",
						"1000"
					]
				}
			},
			"response": []
		},
		{
			"name": "CalculateCashback/1500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"20% cashback for 1500\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.cashbackPercentage).to.eql(20)\r",
							"  pm.expect(responseJson.cashbackValue).to.eql(300)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/calculateCashback/1500",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"calculateCashback",
						"1500"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateReseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.name).to.eql(\"Adam Smith PostmanTest\")\r",
							"  pm.expect(responseJson.cpf).to.eql(\"12345678910\")\r",
							"  pm.expect(responseJson.email).to.eql(\"adam.smith@email.com\")\r",
							"  pm.expect(responseJson.password).to.not.eql(\"123456\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Smith PostmanTest\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "DoNotAllowToCreateResellerWithDuplicateCPF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(409)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.result).to.eql(\"The CPF informed already exists\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Smith PostmanTest\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"email\": \"adam.smith.new@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "DoNotAllowToCreateResellerWithDuplicateEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Do not allow to create Reseller\", function () {\r",
							"  pm.response.to.have.status(409)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.result).to.eql(\"The e-mail informed already exists\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Smith PostmanTest\",\r\n    \"cpf\": \"123.456.789-11\",\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewReseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create New Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.name).to.eql(\"Susan Smith PostmanTest\")\r",
							"  pm.expect(responseJson.cpf).to.eql(\"12345678810\")\r",
							"  pm.expect(responseJson.email).to.eql(\"susan.smith@email.com\")\r",
							"  pm.expect(responseJson.password).to.not.eql(\"password\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Susan Smith PostmanTest\",\r\n    \"cpf\": \"123.456.788-10\",\r\n    \"email\": \"susan.smith@email.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid Login and Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"User Authenticated\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(401)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"Unauthorized\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"1234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(401)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"Unauthorized\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"adam.smith2@email.com\",\r\n    \"password\": \"1234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostmanTestsCleanup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Postman Tests Cleanup\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"Cleanup Finished!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/postmanTestsCleanup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"postmanTestsCleanup"
					]
				}
			},
			"response": []
		}
	]
}