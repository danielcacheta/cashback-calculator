{
	"info": {
		"_postman_id": "998c563d-5831-4a06-8623-ab2e65250ea6",
		"name": "Cashback Calculator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Reseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.name).to.eql(\"Adam Smith PostmanTest\")\r",
							"  pm.expect(responseJson.cpf).to.eql(\"12345678910\")\r",
							"  pm.expect(responseJson.email).to.eql(\"adam.smith@email.com\")\r",
							"  pm.expect(responseJson.password).to.not.eql(\"123456\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Smith PostmanTest\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Reseller - Do not allow with duplicate CPF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller - Do not allow with duplicate CPF\", function () {\r",
							"  pm.response.to.have.status(409)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.result).to.eql(\"The CPF informed already exists\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Smith PostmanTest\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"email\": \"adam.smith.new@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Reseller - Do not allow with duplicate e-mail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller - Do not allow with duplicate e-mail\", function () {\r",
							"  pm.response.to.have.status(409)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.result).to.eql(\"The e-mail informed already exists\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Smith PostmanTest\",\r\n    \"cpf\": \"123.456.789-11\",\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Reseller - Auto approved CPF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller - Auto approved CPF\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.name).to.eql(\"Susan Smith Auto Approved PostmanTest\")\r",
							"  pm.expect(responseJson.cpf).to.eql(\"77023697012\")\r",
							"  pm.expect(responseJson.email).to.eql(\"susan.smith@email.com\")\r",
							"  pm.expect(responseJson.password).to.not.eql(\"password\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Susan Smith Auto Approved PostmanTest\",\r\n    \"cpf\": \"770.236.970-12\",\r\n    \"email\": \"susan.smith@email.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Valid  e-mail and password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login - Valid  e-mail and password\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"User Authenticated\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login - Invalid password\", function () {\r",
							"  pm.response.to.have.status(401)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"Unauthorized\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"adam.smith@email.com\",\r\n    \"password\": \"1234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Invalid e-mail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login - Invalid e-mail\", function () {\r",
							"  pm.response.to.have.status(401)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"Unauthorized\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"adam.smith2@email.com\",\r\n    \"password\": \"1234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"12345678910\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(500.00)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"totalValue\": 500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/123.456.789-10/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"123.456.789-10",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - Without dots and dash on CPF from URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller - Without dots and dash on CPF from URL\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"12345678910\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(500.00)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"totalValue\": 500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/12345678910/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"12345678910",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - Without dots and dash on CPF from Request Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller - Without dots and dash on CPF from Request Body\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"12345678910\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(500.00)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"12345678910\",\r\n    \"totalValue\": 500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/123.456.789-10/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"123.456.789-10",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order - Do not allow if CPFs from request don't match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order - Do not allow if CPFs from request don't match\", function () {\r",
							"  pm.response.to.have.status(422)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"CPFs from Request Body and URL don't match\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"123.456.789-10\",\r\n    \"totalValue\": 500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/12345678911/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"12345678911",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for Auto Approved Reseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for Auto Approved Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"77023697012\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(500.00)\r",
							"  pm.expect(responseJson.state).to.eql('Aprovado')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"770.236.970-12\",\r\n    \"totalValue\": 500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/770.236.970-12/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"770.236.970-12",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order - Do not allow if CPF does not belong to an existing Reseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order - Do not allow if CPFs from request don't match\", function () {\r",
							"  pm.response.to.have.status(404)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"The CPF informed does not belong to a registered Reseller\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"52345678911\",\r\n    \"totalValue\": 500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/52345678911/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"52345678911",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Reseller for Cashback Tier Validations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.name).to.eql(\"Cashback Tiers PostmanTest\")\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.email).to.eql(\"cashback.tiers@email.com\")\r",
							"  pm.expect(responseJson.password).to.not.eql(\"123456\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Cashback Tiers PostmanTest\",\r\n    \"cpf\": \"555.555.555-55\",\r\n    \"email\": \"cashback.tiers@email.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - 999.80",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(999.80)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"55555555555\",\r\n    \"totalValue\": 999.80\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - 999.99",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(999.99)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"55555555555\",\r\n    \"totalValue\": 999.99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - 1000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(1000.00)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"55555555555\",\r\n    \"totalValue\": 1000.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - 1499.99",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(1499.99)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"55555555555\",\r\n    \"totalValue\": 1499.99\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - 1500",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(1500.00)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"55555555555\",\r\n    \"totalValue\": 1500.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order for existing Reseller - 10000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order for existing Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.id).to.not.null\r",
							"  pm.expect(responseJson.code).to.eql(\"A1B2BCPostmanTest\")\r",
							"  pm.expect(Date(responseJson.date)).to.eql(Date(\"2021-08-15\"))\r",
							"  pm.expect(responseJson.cpf).to.eql(\"55555555555\")\r",
							"  pm.expect(responseJson.totalValue).to.eql(10000.00)\r",
							"  pm.expect(responseJson.state).to.eql('Em Validação')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"A1B2BCPostmanTest\",\r\n    \"date\": \"2021-08-15\",\r\n    \"cpf\": \"55555555555\",\r\n    \"totalValue\": 10000.00\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Orders - Do not allow if CPF does not belong to an existing Reseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Order - Do not allow if CPFs from request don't match\", function () {\r",
							"  pm.response.to.have.status(404)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"The CPF informed does not belong to a registered Reseller\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/resellers/52345678911/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"52345678911",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Orders for exising Reseller",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Orders for exising Reseller\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.length).to.eql(6)\r",
							"  pm.test(\"First cashback tier\"), function() {\r",
							"      pm.expect(responseJson[0].totalValue).to.eql(999.80)\r",
							"      pm.expect(responseJson[0].cashbackPercentage).to.eql(10)\r",
							"      pm.expect(responseJson[0].cashbackValue).to.eql(99.98)\r",
							"\r",
							"      pm.expect(responseJson[1].totalValue).to.eql(999.99)\r",
							"      pm.expect(responseJson[1].cashbackPercentage).to.eql(10)\r",
							"      pm.expect(responseJson[1].cashbackValue).to.eql(100)\r",
							"  }\r",
							"  pm.test(\"Second cashback tier\"), function() {\r",
							"      pm.expect(responseJson[2].totalValue).to.eql(1000)\r",
							"      pm.expect(responseJson[2].cashbackPercentage).to.eql(15)\r",
							"      pm.expect(responseJson[2].cashbackValue).to.eql(150)\r",
							"\r",
							"      pm.expect(responseJson[3].totalValue).to.eql(1499.99)\r",
							"      pm.expect(responseJson[3].cashbackPercentage).to.eql(15)\r",
							"      pm.expect(responseJson[3].cashbackValue).to.eql(224.99)\r",
							"  }\r",
							"  pm.test(\"Third cashback tier\"), function() {\r",
							"      pm.expect(responseJson[0].totalValue).to.eql(1500)\r",
							"      pm.expect(responseJson[0].cashbackPercentage).to.eql(20)\r",
							"      pm.expect(responseJson[0].cashbackValue).to.eql(300)\r",
							"\r",
							"      pm.expect(responseJson[0].totalValue).to.eql(10000)\r",
							"      pm.expect(responseJson[0].cashbackPercentage).to.eql(20)\r",
							"      pm.expect(responseJson[0].cashbackValue).to.eql(2000)\r",
							"  }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/resellers/55555555555/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"resellers",
						"55555555555",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Postman Tests Cleanup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Postman Tests Cleanup\", function () {\r",
							"  pm.response.to.have.status(200)\r",
							"  const responseJson = pm.response.json()\r",
							"  pm.expect(responseJson.result).to.eql(\"Cleanup Finished!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/postmanTestsCleanup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"postmanTestsCleanup"
					]
				}
			},
			"response": []
		}
	]
}